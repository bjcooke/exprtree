#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "match.h"
#include "token.h"


#if __STDC_VERSION__<199901L || _POSIX_C_SOURCE<200112L
#define isblank(c) ( ((c) == 0x9) || ((c) == 0x20) )
#endif

#define BASE_CAPACITY 4096
#define MEM_OFFSET 32


token_t *scan_tokens( const char *s, unsigned int *n ) {

  token_t *tokenlist, *tmp;
  size_t capacity;
  unsigned int len, linecount;


  capacity = BASE_CAPACITY - MEM_OFFSET;

  tokenlist = (token_t *) malloc( capacity );

  if ( tokenlist == NULL ) {
    fprintf(stderr, "Failure during tokenization on intial allocation\n");
    return NULL;
  }


  linecount = 0;
  *n = 0;

  while ( *s != '\0' ) {


    /* expand if the array is filled up */
    if ( ((*n+1) * sizeof(token_t)) >= capacity ) {

      capacity += MEM_OFFSET;
      capacity *= capacity;
      capacity -= MEM_OFFSET;

      tmp = (token_t *) malloc( capacity );

      if ( tmp == NULL ) {
        free( tokenlist );
        fprintf(stderr, "Failure during tokenization on reallocation\n");
        return NULL;
      }

      memcpy( tmp, tokenlist, (*n * sizeof(token_t)) );
      free( tokenlist );
      tokenlist = tmp;
      tmp = NULL;

    }


    if ( *s == '\n' ) {
      linecount++;
      s++;
    }
    else if ( isblank(*s) ) {
      s++;
    }
